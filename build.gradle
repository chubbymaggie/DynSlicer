apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'findbugs'

def lib_dir = new File('lib/')
if (!lib_dir.exists()) {
	lib_dir.mkdirs()
}

def randoop_jar = new File('lib/randoop.jar')
if (!randoop_jar.exists()) {	
	println "downloading randoop"	
    new URL('http://www.csl.sri.com/users/schaef/jars/randoop.jar').withInputStream{ i -> randoop_jar.withOutputStream{ it << i }}
}
def daikon_jar = new File('lib/daikon.jar')
if (!daikon_jar.exists()) {
	println "downloading daikon"
    new URL('http://www.csl.sri.com/users/schaef/jars/daikon.jar').withInputStream{ i -> daikon_jar.withOutputStream{ it << i }}
}
def junit_jar = new File('lib/junit.jar')
if (!junit_jar.exists()) {
	println "downloading junit"
    new URL('https://github.com/junit-team/junit4/releases/download/r4.12/junit-4.12.jar').withInputStream{ i -> junit_jar.withOutputStream{ it << i }}
}

def soot_jar = new File('lib/soot-trunk.jar')
if (!soot_jar.exists()) {	
	println "downloading soot"	
    new URL('https://ssebuild.cased.de/nightly/soot/lib/soot-trunk.jar').withInputStream{ i -> soot_jar.withOutputStream{ it << i }}
}

def j2b_jar = new File('lib/j2b.jar')
if (!j2b_jar.exists()) {	
	println "downloading j2b"	
    new URL('http://www.csl.sri.com/users/schaef/jars/j2b.jar').withInputStream{ i -> j2b_jar.withOutputStream{ it << i }}
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

repositories {
	mavenCentral()
}

dependencies {
//    compile 'args4j:args4j:2.32'
	compile 'com.google.code.findbugs:annotations:3.0.0'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'com.google.guava:guava:19.0'
//    compile 'org.ow2.asm:asm:5.1'
//    compile 'org.ow2.asm:asm-util:5.1'
    
	compile fileTree(dir: 'lib', include: '*.jar')

    testCompile 'junit:junit:4.12'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
    options.compilerArgs << "-Werror"
}

// testing related activities -----------------
tasks.withType(FindBugs) {
    effort = "default"
    reportLevel = "medium"

    reports {
        xml.enabled = false
        html.enabled = true
    }
 }
 
 // building the jar ---------------------
jar {
    manifest {
        attributes 'Main-Class': "dynslicer.Main",
                   'Class-Path': '.',
                   'Implementation-Title': 'DynSlicer',
                   'Implementation-Version': "$version"
    }

    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}